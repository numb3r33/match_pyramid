# AUTOGENERATED! DO NOT EDIT! File to edit: 02_learner.ipynb (unless otherwise specified).

__all__ = ['ImageTextCallback', 'ImageTextLearner']

# Cell
from fastai.text.all     import *
from matchpyramid.model  import *
from matchpyramid.data   import *

# Cell
class ImageTextCallback(Callback):
    def __init__(self, model):
        self.labels = tuple()
        self.model_args = {k:v.default for k, v in signature(model.forward).parameters.items()}

    def before_batch(self):
        if 'labels' in self.xb[0].keys():
            self.labels = (self.xb[0]['labels'], )
        # make a tuple containing an element for each argument model excepts
        # if argument is not in xb it is set to default value
        self.learn.xb = tuple([self.xb[0]['pa'], self.xb[0]['pb']])

    def after_pred(self):
        if len(self.labels):
            loss = self.learn.loss_func(self.pred, self.labels[0]).clone()

            self.learn.loss_grad = loss
            self.learn.loss      = loss.clone()

        self.learn.pred = self.pred

    def after_loss(self):
        if len(self.labels):
            self.learn.yb = self.labels[0]
            self.labels   = tuple()

# Cell
@delegates(Learner.__init__)
class ImageTextLearner(Learner):
    "Learner for training transformers from HuggingFace"
    def __init__(self, dls, model, **kwargs):
        super().__init__(dls, model, **kwargs)
        self.add_cb(ImageTextCallback(model))